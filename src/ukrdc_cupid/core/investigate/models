from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship, Mapped
from sqlalchemy import (
    MetaData,
    Column,
    Integer,
    String,
    Boolean,
    DateTime,
    Text,
    ForeignKey,
    UniqueConstraint,
)
from sqlalchemy.sql import func

metadata = MetaData()
Base = declarative_base(metadata=metadata)

GLOBAL_LAZY = "dynamic"


# Many to many relationship exists between pateint ids 
# (internal such as ukrdc and external such as NHS)
# this table allows a issue_id to allow multiple patientids to be appended to any particular issue 
# similarly it makes it easy to look up which issues are already accosiated with a particular id.
class PatientIDToIssue(Base):
    __tablename__ = "patientidtoissue"
    __table_args__ = (UniqueConstraint("patient_id_id", "issue_id"),)
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    issue_id = Column(Integer, ForeignKey("issue.id"))
    patient_id_id = Column(Integer, ForeignKey("patientid.id"))
    
    # Define the many-to-one relationship from PatientIDToIssue to PatientID
    patient_id = relationship("PatientID", back_populates="patient_to_issues")

    # Define the many-to-one relationship from PatientIDToIssue to Issue
    issue = relationship("Issue", back_populates="issue_to_patients")


class PatientID(Base):
    __tablename__ = "patientid"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    patient_id = Column(String(50), index=True)
    is_internal = Column(Boolean) # is it a pid or ukrdcid
    organization = Column(String(50))
    numbertype = Column(String(3))

    # Define the one-to-many relationship from PatientID to PatientIDToIssue
    patient_to_issues = relationship("PatientIDToIssue", back_populates="patient_id", lazy=GLOBAL_LAZY)


class Issue(Base):
    __tablename__ = "issue"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    issue_type = Column(String(10), nullable=False)
    date_created = Column(DateTime, nullable=False)
    filename = Column(String(100), nullable=False, index=True)
    file = Column(Text)

    # Define the one-to-many relationship from Issue to PatientIDToIssue
    issue_to_patients = relationship("PatientIDToIssue", back_populates="issue", lazy=GLOBAL_LAZY)
